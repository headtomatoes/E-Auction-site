# ===================================================================
# Application Configuration
# ===================================================================
spring.application.name=ebay_clone

# ===================================================================
# Server Configuration
# ===================================================================
# Server Port (Change to 8080 if 8082 is in use)
server.port=8082

# ===================================================================
# Database Configuration
# ===================================================================
# Prioritize Docker environment variables for database connection.
# Ensure DB_URL, DB_USERNAME, and DB_PASSWORD are set in your Docker environment.
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# --- Commented out: Alternative Local Database Configuration ---
# If not using Docker, you can uncomment and use these for local MySQL.
# spring.datasource.url=jdbc:mysql://localhost:3307/Ebay_clone_db
# spring.datasource.username=wad
# spring.datasource.password=0987654321q

# --- Commented out: Another Local Database Configuration Example ---
# spring.datasource.url=jdbc:mysql://localhost:3306/ebay_clone_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
# spring.datasource.username=root
# spring.datasource.password=pass

# --- Commented out: Local Database Configuration with Environment Variable Fallbacks ---
# This configuration attempts to use environment variables (DB_URL, DB_USERNAME, DB_PASSWORD)
# and falls back to default local values if the environment variables are not set.
# spring.datasource.url=${DB_URL:jdbc:mysql://localhost:3306/ebay_clone_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true}
# spring.datasource.username=${DB_USERNAME:root}
# spring.datasource.password=${DB_PASSWORD:pass}

# ===================================================================
# JPA / Hibernate Configuration
# ===================================================================
# spring.jpa.hibernate.ddl-auto:
#   'validate': Validates the schema, makes no changes to the database. Good for production with Liquibase/Flyway.
#   'update': Hibernate alters the schema according to your entities. Use with caution, especially in later development stages.
#   'create': Creates the schema, destroying previous data.
#   'create-drop': Creates the schema on startup and drops it on shutdown.
#   'none': Disables DDL handling.
spring.jpa.hibernate.ddl-auto=validate
# Log SQL statements (useful for development)
spring.jpa.show-sql=true 
# Adjust if using a different MySQL version or database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# ===================================================================
# Liquibase Configuration (Database Migration Tool)
# ===================================================================
# spring.liquibase.enabled=true # Enabled by default if the Liquibase dependency is present
# spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.xml # Path to your master changelog file

# ===================================================================
# WebSocket Configuration
# ===================================================================
spring.websocket.enabled=true
spring.websocket.max-text-message-size=32768 
# 32KB
spring.websocket.max-binary-message-size=32768
# 32KB
spring.websocket.max-session-idle-timeout=120000
# 120 seconds (2 minutes)
spring.websocket.async-send-timeout=60000
# 60 seconds (1 minute)

# ===================================================================
# Logging Configuration
# ===================================================================
# Set specific logging levels for debugging purposes.
# General debug flag (its effect depends on how it's used in your application code)
debug=true

logging.level.org.springframework.web.socket=DEBUG
logging.level.org.springframework.messaging=DEBUG
# For Tomcat's WebSocket implementation
logging.level.org.apache.tomcat.websocket=DEBUG


# ===================================================================
# JWT (JSON Web Token) Configuration
# ===================================================================
# IMPORTANT: For production, the JWT secret (jwt.secret) should be a strong, unique key
# and ideally managed via environment variables (e.g., ${JWT_SECRET}) or a configuration server,
# not hardcoded directly in the properties file.
# jwt.secret=${JWT_SECRET}
jwt.secret=1ilXgXfrANdVPpq6Kjo4YxybCugkQk8uW9nO3UKB6QiyWS7Fk/8qkvD2cIQ7wo/r7TDvfuWVzdoX2ifZCNcRUg==

# Token expiration time in milliseconds (24 hours)
jwt.expiration.ms=86400000

# ===================================================================
# Stripe Configuration
# ===================================================================
# IMPORTANT: Replace placeholders with your actual Stripe API keys.
# These should ideally be managed via environment variables or a secure configuration server in production.
# Replace with your actual Stripe secret key
stripe.api.key.secret=sk_test_YOUR_STRIPE_SECRET_KEY
# Replace with your actual Stripe webhook signing secret
stripe.webhook.secret=whsec_YOUR_STRIPE_WEBHOOK_SIGNING_SECRET